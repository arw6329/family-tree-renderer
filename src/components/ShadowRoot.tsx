import { ReactNode, useEffect, useRef } from "react"
import { createRoot } from "react-dom/client"

const ShadowRoot: React.FC<{ children: ReactNode }> = ({ children }) => {
    const rootElem = useRef<HTMLDivElement>(null)

    useEffect(() => {
        if(!customElements.get('reunionpage-family-tree')) {
            customElements.define('reunionpage-family-tree', class ReunionPageFamilyTree extends HTMLElement {
                private static instances: ReunionPageFamilyTree[] = []
                private static styles: string[] = []
    
                // these are generated by a vite plugin
                static injectStyles(cssCode: string) {
                    ReunionPageFamilyTree.styles.push(cssCode)
                    ReunionPageFamilyTree.instances.forEach(instance => {
                        const stylesheet = new CSSStyleSheet()
                        stylesheet.replaceSync(cssCode)
                        instance.shadowRoot?.adoptedStyleSheets.push(stylesheet)
                    })
                }
    
                constructor() {
                    super()
                    ReunionPageFamilyTree.instances.push(this)
                }
    
                connectedCallback() {
                    if(!this.shadowRoot) {
                        const shadow = this.attachShadow({ mode: 'open' })
                        ReunionPageFamilyTree.styles.forEach(cssCode => {
                            const stylesheet = new CSSStyleSheet()
                            stylesheet.replaceSync(cssCode)
                            shadow.adoptedStyleSheets.push(stylesheet)
                        })
    
                        const root = createRoot(shadow)
                        root.render(children)
                    }
                }
            })
        }

        rootElem.current.appendChild(document.createElement('reunionpage-family-tree'))
    }, [])

    return (
        <div style={{ height: '100%' }} ref={rootElem} />
    )
}

export default ShadowRoot
