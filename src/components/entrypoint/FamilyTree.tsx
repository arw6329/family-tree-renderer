import { ReactNode, useEffect, useRef } from "react"
import { createRoot, type Root } from "react-dom/client"
import { FamilyTreeDatabase } from "@/lib/family-tree/FamilyTreeDatabase"
import _FamilyTree from "../family-tree/family-tree/FamilyTree"

const FamilyTree: React.FC<{
    database?: FamilyTreeDatabase
    onDatabaseChange?: (database: FamilyTreeDatabase) => Promise<unknown>
}> = ({ database, onDatabaseChange }) => {
    const rootElem = useRef<HTMLDivElement>(null)

    useEffect(() => {
        if(!customElements.get('reunionpage-family-tree')) {
            customElements.define('reunionpage-family-tree', class ReunionPageFamilyTree extends HTMLElement {
                private static instances: ReunionPageFamilyTree[] = []
                private static styles: string[] = []

                private root: Root | null = null
    
                // these are generated by a vite plugin
                static injectStyles(cssCode: string) {
                    ReunionPageFamilyTree.styles.push(cssCode)
                    ReunionPageFamilyTree.instances.forEach(instance => {
                        const stylesheet = new CSSStyleSheet()
                        stylesheet.replaceSync(cssCode)
                        instance.shadowRoot?.adoptedStyleSheets.push(stylesheet)
                    })
                }
    
                constructor() {
                    super()
                    ReunionPageFamilyTree.instances.push(this)
                }
    
                connectedCallback() {
                    if(!this.shadowRoot) {
                        const shadow = this.attachShadow({ mode: 'open' })
                        ReunionPageFamilyTree.styles.forEach(cssCode => {
                            const stylesheet = new CSSStyleSheet()
                            stylesheet.replaceSync(cssCode)
                            shadow.adoptedStyleSheets.push(stylesheet)
                        })
                    } else {
                        this.shadowRoot.innerHTML = ''
                    }  
                    
                    this.root = createRoot(this.shadowRoot)
                }

                render(node: ReactNode) {
                    this.root.render(node)
                }
            })
        }

        rootElem.current.firstElementChild.render?.(<_FamilyTree
            database={database}
            onDatabaseChange={onDatabaseChange}
        />)
    })

    return (
        <div style={{ height: '100%' }} ref={rootElem}>
            <reunionpage-family-tree style={{ display: 'block', height: '100%', backgroundColor: '#1f2325' }} />
        </div>
    )
}

export default FamilyTree
